procedure alloc_temp(int tmpo, stack tmp_stack)
    //tmp_sp += 1
    push(tmpo,tmp_stack)
   //mp_stack[tmp_sp] += 0


procedure gaussian_elim(int mat[], int mat1[], int inv[], int inv1[], int dim, stack zero)
    local int i = 0
    from i = 0 loop
        local int j = 0
        from j = 0 loop
            local int row_multiplier1 = mat[i*(dim-1)+j]*mat1[j*(dim-1)+i]
            local int row_multiplier2 = mat[j*(dim-1)+i]*mat1[i*(dim-1)+j]

            local int k = 0
            from k = 0 loop
                local int holder1 = 0
                holder1 += mat[i*(dim-1)+k]
                local int holder2 = 0
                holder2 += mat1[i*(dim-1)+k]
                mat[i*(dim-1)+k] -= holder1
                mat1[i*(dim-1)+k] -= holder2
                    
                local int holderjk1 = 0
                holderjk1 += mat[j*(dim-1)+k]
                local int holderjk2 = 0
                holderjk2 += mat1[j*(dim-1)+k]
                    
                mat[i*(dim-1)+k] += holder1*holderjk2*row_multiplier2 - holder2*holderjk1*row_multiplier1
                mat1[i*(dim-1)+k] += holder1*holderjk2*row_multiplier2
                //mat[i*(dim-1)+k] -= mat[j*(dim-1)+k]*row_multiplier1
                    
                    
                call alloc_temp(holderjk1, zero)
                call alloc_temp(holderjk2, zero)
                call alloc_temp(holder2, zero)
                call alloc_temp(holder1, zero)
                holder1 += inv[i*(dim-1)+k]
                holder2 += inv1[i*(dim-1)+k]
                    
                inv[i*(dim-1)+k] -= holder1
                inv1[i*(dim-1)+k] -= holder2
                    
                inv[i*(dim-1)+k] += holder1*mat1[j*(dim-1)+k]*row_multiplier2 - holder2*mat[j*(dim-1)+k]*row_multiplier1
                inv1[i*(dim-1)+k] += holder1*mat1[j*(dim-1)+k]*row_multiplier2
                //inv[i*(dim-1)+k] -= mat[j*(dim-1)+k]*row_multiplier
                
                call alloc_temp(holder2, zero)
                call alloc_temp(holder1, zero)
                    
                delocal int holderjk2
                delocal int holderjk1
                delocal int holder2
                delocal int holder1
                k += 1
            until k = dim
            delocal int k = dim
            call alloc_temp(row_multiplier1, zero)
            call alloc_temp(row_multiplier2, zero)
            delocal int row_multiplier2
            delocal int row_multiplier1
            
            j += 1
        until j = i
        local int reducing_multiplier1 = mat[i*(dim-1)+i]
        local int reducing_multiplier2 = mat1[i*(dim-1)+i]

        if reducing_multiplier1 != 0 
            then local int k = 0
                k += i
                from k = i loop
                    local int holder1 = 0
                    holder1 += mat[i*(dim-1)+k]
                    local int holder2 = 0
                    holder2 += inv[i*(dim-1)+k]
                    local int holder3 = 0
                    holder3 += mat1[i*(dim-1)+k]
                    local int holder4 = 0
                    holder4 += inv1[i*(dim-1)+k]
                    //call alloc_temp(holder1, zero)
                    //call alloc_temp(holder2, zero)

                    
                    mat[i*(dim-1)+k] -= holder1
                    mat[i*(dim-1)+k] += holder1*reducing_multiplier2
                    mat1[i*(dim-1)+k] -= holder3
                    mat1[i*(dim-1)+k] += holder3*reducing_multiplier1
                    
                    inv[i*(dim-1)+k] -= holder2
                    inv[i*(dim-1)+k] += mat[i*(dim-1)+k]*reducing_multiplier2
                    inv1[i*(dim-1)+k] -= holder4
                    inv1[i*(dim-1)+k] += mat1[i*(dim-1)+k]*reducing_multiplier1
                    
                    
                    call alloc_temp(holder4, zero)
                    call alloc_temp(holder3, zero)
                    call alloc_temp(holder2, zero)
                    call alloc_temp(holder1, zero)
                    
                    delocal int holder4
                    delocal int holder3
                    delocal int holder2
                    delocal int holder1
                    k += 1
                until k = dim
                k -= dim
                delocal int k = 0
        fi reducing_multiplier1 != 0 
        call alloc_temp(reducing_multiplier1, zero)
        call alloc_temp(reducing_multiplier2, zero)
        delocal int reducing_multiplier2
        delocal int reducing_multiplier1
        j -= i
        delocal int j = 0
        i += 1
    until i = dim
    delocal int i = dim
    
    local int i = dim - 1 
    from i = dim - 1 loop
        local int j = i
        from j = i loop
            local int row_multiplier1 = mat[i*(dim-1)+j]
            local int row_multiplier2 = mat1[i*(dim-1)+j]
            //call alloc_temp(row_multiplier, zero)
            local int k = 0
            from k = 0 loop
                local int holder1 = mat[i*(dim-1)+k]
                local int holder2 = mat1[i*(dim-1)+k]
                local int holder3 = inv[i*(dim-1)+k]
                local int holder4 = inv1[i*(dim-1)+k]
                local int holderjk1 = mat[j*(dim-1)+k]
                local int holderjk2 = mat1[j*(dim-1)+k]


                mat[i*(dim-1)+k] -= holder1
                mat1[i*(dim-1)+k] -= holder2
                inv[i*(dim-1)+k] -= holder3
                inv1[i*(dim-1)+k] -= holder4
                
                mat[i*(dim-1)+k] += holder1*holderjk2*row_multiplier2 - holder2*holderjk1*row_multiplier1
                mat1[i*(dim-1)+k] += holder1*holderjk2*row_multiplier2
                inv[i*(dim-1)+k] += holder3*holderjk2*row_multiplier2 - holder4*holderjk1*row_multiplier1
                inv1[i*(dim-1)+k] += holder3*holderjk2*row_multiplier2
                
                call alloc_temp(holder4, zero)
                call alloc_temp(holder3, zero)
                call alloc_temp(holder2, zero)
                call alloc_temp(holder1, zero)
                call alloc_temp(holderjk1, zero)
                call alloc_temp(holderjk2, zero)
                
                delocal int holderjk2
                delocal int holderjk1
                delocal int holder4
                delocal int holder3
                delocal int holder2
                delocal int holder1

                k += 1
            until k = dim
            k -= dim
            delocal int k = 0
            call alloc_temp(row_multiplier1, zero)
            call alloc_temp(row_multiplier2, zero)
            delocal int row_multiplier2
            delocal int row_multiplier1

            j += 1
        until j = dim - 1
        j -= dim - 1
        j += i
        delocal int j = i
        i -= 1    
    until i = 0
    i += dim - 1

    delocal int i = dim - 1
    






procedure id(int inv[], int dim)
    local int k = 1
    inv[0] += 1
    inv[dim**2-1] += 1
    from k = 1 loop
        inv[dim*k+k] += 1
        k += 1
    until k = dim-1
    k -= dim-1
    k += 1
    delocal int k = 1
    
    
procedure ones(int ones[], int dim)
    local int k = 0
    from k = 0 loop
        ones[k] += 1
        k += 1
    until k = dim**2
    k -= dim**2
    delocal int k = 0


procedure main()
    //n = number of rows
    //m = number of columns
    //matrices are converted to 1D arrays by reading out each element of a row, then moving to the next one
    //(left to right)
    int dim = 3

    int mat[dim**2]
    int mat2[dim**2]
    int inv[dim**2]
    int inv2[dim**2]

    stack zero
    // have to select matrix where det is 1
    //int only, can't do Gaussian elimination like this
    //divide by 0 error, have to do safety check
    //floating point numbers are inherently reversible
    mat[0] += 2 
    mat[1] += 0 
    mat[2] += -1
    mat[3] += 5
    mat[4] += 1
    mat[5] += 0
    mat[6] += 0
    mat[7] += 1
    mat[8] += 3


    //sets inverse to identity to begin process
    call id(inv, dim)
    call id(inv2, dim)
    call ones(mat2, dim)
    call gaussian_elim(mat, mat2, inv, inv2, dim, zero)
